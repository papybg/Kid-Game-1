name: Deploy backend to Render and trigger Netlify

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  render-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "Render secrets not set. Skipping Render deploy.";
            exit 0;
          fi

          echo "Triggering deploy for service $RENDER_SERVICE_ID"
          resp=$(curl -s -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}')

          echo "Response: $resp"
          deploy_id=$(echo "$resp" | jq -r .id)
          if [ "$deploy_id" = "null" ] || [ -z "$deploy_id" ]; then
            echo "Failed to create deploy. Exiting with error.";
            echo "resp=$resp" >> $GITHUB_OUTPUT
            exit 1;
          fi

          echo "Created deploy $deploy_id"
          echo "deploy_id=$deploy_id" >> $GITHUB_OUTPUT

      - name: Wait for Render deploy to finish
        id: wait
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          deploy_id=${{ steps.trigger.outputs.deploy_id }}
          if [ -z "$deploy_id" ]; then
            echo "No deploy id found, skipping wait.";
            exit 0;
          fi
          echo "Waiting for deploy $deploy_id to complete..."
          state=""
          for i in {1..60}; do
            resp=$(curl -s "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$deploy_id" -H "Authorization: Bearer $RENDER_API_KEY")
            state=$(echo "$resp" | jq -r .state)
            echo "state=$state"
            if [ "$state" = "succeeded" ]; then
              echo "Deploy succeeded";
              exit 0;
            fi
            if [ "$state" = "failed" ]; then
              echo "Deploy failed: $resp";
              exit 1;
            fi
            sleep 5
          done
          echo "Timed out waiting for deploy";
          exit 1

      - name: Trigger Netlify build hook
        if: ${{ secrets.NETLIFY_BUILD_HOOK != '' }}
        env:
          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
        run: |
          echo "Triggering Netlify build hook"
          curl -s -X POST "$NETLIFY_BUILD_HOOK"
